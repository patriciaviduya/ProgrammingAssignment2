##This is the makeCacheMatrix. This is a function that creates a special "matrix" object that can cache it's inverse
	
	makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  get <- function() x
  setInverse <- function(inverse) inv <<- solve(x)
  getInverse <- function() inv
  list(set = set, get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

##This is the CacheSolve funciton and it computes the inverse of the matrix created by the makeCacheMatrix.

CacheSolve<-function(x,...){
	inv<-x$getinv()
	if(!is.null(inv)){
		message("getting cached data")
		return(inv)
}
mat<-x$get()
inv<-solve(mat,...)
x$setInverse(inv)
return(inv)
}

##this is an example of what I did to get a return of the inverse of the matrix

patty_mat <- makeCacheMatrix()
patty_mat$set(matrix(4:7,2,2))
patty_mat$get()

patty_mat$setInverse()
patty_mat$getInverse()
